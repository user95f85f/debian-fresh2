
#prevents CTRL+S freezing the tty/virtual-console (ie. until CTRL+Q is hit)
#see:   stty -a | egrep 'start|stop'
stty start undef
stty stop undef

export EDITOR=/usr/bin/vim
export TZ=America/Los_Angeles
export WINEPREFIX=/media/user/DEB_STUFF/dot-wine
apt='apt apt-cache apt-file apt-get apt-mark aptitude dpkg dpkg-query' 
dir_lorem_ipsum='/home/user/Documents/lorem-ipsum'
photos='/home/user/Documents/STATIC-photos'
pictures=$photos
shield_mount_dir='/home/user/Documents/shield_mapper_mount'
url_urbandictionary='https://api.urbandictionary.com/v0/define?term'
url_wikipedia='https://en.wikipedia.org/wiki/Special:Search?search'
url_wiktionary='https://en.wiktionary.org/wiki'
wow='/media/user/DEB_STUFF/dot-wine/drive_c/Program Files (x86)/Battle.net'
www='/home/user/Documents/Github-repos/localhost-httpd/www'
youtube='/home/user/Documents/youtube-downloads'
export bash1='/home/user/Documents/bash.1.txt'
export git='/home/user/Documents/Github-repos'
export goodideas1='/home/user/Documents/good-ideas.1.txt'
export music='/home/user/Documents/mp3s'
export perl_cheatsheet='/home/user/Documents/Github-repos/debian-fresh1/perl-cheat-sheet.txt'
export php_cheatsheet='/home/user/Documents/Github-repos/debian-fresh2/php-cheat-sheet.txt'
export python_cheatsheet='/home/user/Documents/Github-repos/debian-fresh1/python-cheat-sheet.txt'
export screenshots='/home/user/Documents/screenshots'
export todo='/home/user/Documents/TODO/todo.txt'
export txt_lorem_ipsum='/home/user/Documents/lorem-ipsum.1.txt'
export weechat_logs='/home/user/.weechat/logs'
export wireless_cheatsheet='/home/user/Documents/Github-repos/debian-fresh2/wireless-cheat-sheet.txt'
alias ..='cd ..'
alias bash++='/usr/bin/perl'
alias battery='echo acpitool -b'
alias bitchx='/usr/bin/weechat -a -p --plugins irc,logger,alias,exec' #no auto-connect to a server and no plug-ins automatically loaded
alias check-google='wget -O - https://www.google.com/'
alias check-network='bash -c "ip route; curl -IL http://nmcheck.gnome.org/check_network_status.txt"'
alias df='df --human-readable --print-type 2>/dev/null'
alias ffmpeg='/usr/bin/ffmpeg -hide_banner'
alias ffprobe='/usr/bin/ffprobe -hide_banner'
alias find-biggest-dirs='du -h | sort -h'
alias jpg='/usr/bin/jpegoptim -s'
alias lightdm-stop='is_desktop_running && sudo systemctl stop lightdm'
alias lightdm-start='is_desktop_running || sudo systemctl start lightdm'
alias myip='bash -c "wget --quiet -O - -4 ifconfig.io; wget --quiet -O - -6 ifconfig.io"'
alias png='/usr/bin/optipng'
alias rm2='/usr/bin/shred --remove=wipesync --verbose'
alias suspend='echo systemctl suspend'
alias tree='/usr/bin/tree -A'
alias tty-exec-desktop-program='echo "DISPLAY=:0.0 epiphany http://people.oregonstate.edu"'
alias tty-silence-restore='sudo dmesg -n 8'
alias tty-silence='sudo dmesg -n 1'
alias udisks='/usr/bin/udisksctl'
alias vi='/usr/bin/vim'
alias vim2='/usr/bin/vim "+set autoread readonly"'
alias weechat='echo bitchx'
gcc2(){
  [ -z "$1" ] && return 22
  [ -f "$1" ] || return 23
  file "$1" | grep -qF 'C source' || return 24
  /usr/bin/gcc -ggdb3 -Og -Wall -Wextra -Wpedantic "$1" && ./a.out
  rm -vf a.out
}
funny-GUI-alert(){
  local messages=() message=''
  while :; do
    wait_this_long="$(( RANDOM % 10 + 1 ))m"
    echo sleep "$wait_this_long"
    sleep "$wait_this_long"
    message="$(printf '%s' $'GET OUT\tgoto PRISON\tgoto HOMELESS SHELTER\tFEED GRASS\tBECOME A CLOUD' | tr '\t' '\n' | shuf --head-count=1)"
    DISPLAY=:0.0 xterm -T sup -e sh -c "echo '$message'; sleep 9.39"
  done
}
utfcode2all-character-info(){
  [ -n "$1" ] || return 33
  [[ "$1" =~ ^[0-9]+$ ]] || return 44
  lynx -force_html <(wget -O - https://www.compart.com/en/unicode/U+"$1")
}
utfcode2htmlentities-possibilities(){
  [ -n "$1" ] || return 33
  [[ "$1" =~ ^[0-9]+$ ]] || return 44
  wget -O - https://www.compart.com/en/unicode/U+"$1" | grep -Eo '&amp;[^;]+;' | sort | uniq | sed 's/&amp;/\&/'
}
py(){
  [ -z "$1" ] && return 99
  [ -f "$1" ] && return 100
  [[ "$1" =~ \.py$ ]] || return 101
  cat <<'EOFRR2' > "$1"
#!/usr/bin/python3
if __name__ == '__main__':
  from sys import argv
  del argv[0]
  if len(sys.argv) > 0:
    ar_input = argv[0:]
  else:
    ar_input = sys.stdin.read().split(' ')

  print(ar_input)


EOFRR2
  [ -f "$1" ] || return 102
  chmod +x "$1"
}
cpu-temp(){
  echo CPU temperature is `c2f $(sensors | grep -E ^CPU | grep -Eo [0-9]+\.[0-9]+)` Fahrenheit
}
urban-example(){
  cat <<EOFFFFFUUUUU
wget -O - \$url_urbandicationary=mouter | jq -C | less -R
wget -O - \$url_urbandictionary=boomer | jq --monochrome-output '.list[]["definition","example"]'
EOFFFFFUUUUU
}
wiki-example(){
  echo 'links2 $url_wiktionary/stu'
  echo 'links2 $url_wikipedia=thunderbolt+usb'
}
mp3_add(){
  if is_desktop_running; then
    DISPLAY=:0.0 mousepad '/home/user/Documents/youtube-downloads/download.sh' &
  else
    return 9
  fi
}
bashrc-alias-list-function-list-print(){
  if [ "$1" = '-2' ]; then
    local out=$(alias -p)
    out+="\n$(compgen -A function | egrep -v ^_)"
    while read line1; do printf '%80s' "$line1       "; read line2; printf '%s\n' "$line2"; done <<<"$out"
    return 0
  fi

  alias -p; compgen -A function | egrep -v ^_
}
up(){
  local levels="$1"
  [ -z "$levels" ] && levels=2
  [[ "$levels" =~ ^[0-9]$ ]] || return 4
  while [ "$levels" -gt 0 ]; do
    (( levels-- ))
    cd ..
  done
}
str_trim(){
  local args="$*"
  [ -z "$args" ] && return 0
  args="${args#"${args%%[![:space:]]*}"}"
  args="${args%"${args##*[![:space:]]}"}"
  echo -n "$args"
}
str_tolowercase(){
  echo "$*" | tr A-Z a-z
}
str_touppercase(){
  echo "$*" | tr a-z A-Z
}
cd2(){
  [ $# -eq 1 ] || return 4
  if [ -z "$1" ]; then
    cd
  elif [ -d "$1" ]; then
    cd "$1"
  else
    mkdir -pv "$1" && cd "$1"
  fi
}
is_desktop_running(){
  if systemctl status --no-pager lightdm; then return 0; else return 1; fi
}
eject(){
  if [ -d /media/user/MYFAT34 ]; then
    udisksctl unmount --block-device /dev/sdb1
    udisksctl power-off --block-device /dev/sdb
  else
    /usr/bin/eject
  fi
}
Z(){
  cd ~/Documents && unzip Z.zip && shred -uv Z.zip && $EDITOR Z && zip --encrypt Z.zip Z && shred -uv Z
}
apt-non-debian-packages-installed(){
  aptitude search '?narrow(?installed, ?not(?origin(Debian)))'
}
dice(){ ack "https?://.*$*" $weechat_logs | tail -1 | perl -ne 'BEGIN{undef $/;}if(m#(https?://[a-zA-Z0-9,%\#=/.:?_+&\-]+)#){print $1;}'; }

tarhelp(){
  cat <<EOFFFFFFFF
1) gz
2) tar.gz
3) tar.bz2
4) zip
5) tar
6) tar.xz

EOFFFFFFFF
  local myv
  read -n 1 -p '? ' myv
  echo

  case "$myv" in
    1) echo 'gzip 1 #replaces 1 with 1.gz';;
    2) echo tar cvzf create-me.tar.gz 1 2 3 4;;
    3) echo tar cvf create-me.tar.bz2 --bzip2 1 2 3 4;;
    4) echo zip -r create-me.zip 1 2 3 4;;
    5) echo tar cvf create-me.tar 1 2 3 4;;
    6) echo 'tar cvf - 1 2 3 4 | xz -c > create-me.tar.xz';;
  esac

}
vol-is-good(){
  local current_volume=$(vol-get-current-float --percent-integer)
  local VOLUME_THRESHOLD_FOR_MUSIC=26
  [ -z "$current_volume" ] && return 3
  [[ "$current_volume" =~ [0-9]{1,3} ]] || return 4
  [ "$current_volume" -gt "$VOLUME_THRESHOLD_FOR_MUSIC" ] && {
    printf 'PANIC: Current alsa/pulseaudio volume settings (ie. %d) are 0.2%% good.\nVolume threshold of %d is too high for music/mp3s/ogg/whatever\n' "$current_volume" "$VOLUME_THRESHOLD_FOR_MUSIC"
    echo '`vol-low-set`'
    local myv
    read -n 1 -p '? (Y/n) ' myv
    echo

    case "$myv" in
      [Yy]|'') vol-low-set; return 0;;
    esac
    return 200
  } 
  return 0  
}
vol-get-current-float(){
  local volume_float=$(amixer get Master | perl -ne 'BEGIN{undef $/;} /Limits: Playback 0 - ([0-9]+).*Front Right: Playback ([0-9]+)/s && printf "%0.12f", $2 / $1;')
  [ -z "$volume_float" ] && return 120
  [ "$1" = '--percent-integer' ] && { printf '%0.0f' $(printf '%s * 100\n' "$volume_float" | bc); return 0; }
  echo "$volume_float"
  return 0
}
vol-low-set(){
  echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 20%
  pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 20%
  return 0
}
vol-up(){
  echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
  pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
  while :; do
    read -p 'more? '
    echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
    pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5%
  done
  return 0
}
vol-down(){
  echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
  pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
  while :; do
    read -p 'more? '
    echo pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
    pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5%
  done
  return 0
}
xclip-cp(){
  [ -z "$1" ] && return 4
  [ -f "$1" ] || return 5
  DISPLAY=:0.0 xclip -selection clipboard "$1"
  return 0
}
watch-weechat-log-user-update-return-when-changed(){
  [ -z "$1" ] && return 41
  touch "$weechat_logs/$1"
  while [ ! -f "$weechat_logs/irc.libera.$1.weechatlog" -o "$weechat_logs/irc.libera.$1.weechatlog" -ot "$weechat_logs/$1" ]; do
    sleep 31.2;
  done
}
watch-weechat-log-keyword-return-when-changed(){
  [ -z "$1" ] && return 41
  current_wc_l="$(ack "$*" "$weechat_logs" | wc -l)"
  while [ "$(ack "$*" "$weechat_logs" | wc -l)" -eq "$current_wc_l" ]; do
    sleep 12.2
  done
  return 0
}
watch-port80-ipv4(){
  while [ 1 ]; do sudo nc -l -p 80 >> ~/whatever.log; sleep 0.2; done
  return 0
}
watch-port80-ipv6(){
  while [ 1 ]; do sudo nc -l -6 -p 80 >> ~/whatever.log; sleep 0.2; done
  return 0
}
watch-home(){
  inotifywait --recursive --monitor --quiet --event create ~/.config ~/.local
}
watch-logs-global-journalctl(){
  sudo journalctl -n30 --follow
}
ffplay(){
  [ -z "$1" ] && return 1
  [ -f "$1" ] || return 2
  local filename="$1"
  local file_extension="${filename##*.}"
  if [[ $file_extension = 'mp3' || $file_extension = 'wav' || $file_extension = 'ogg' || $file_extension = 'm4a' ]]; then
    vol-is-good || return 44
    /usr/bin/ffplay -nodisp -autoexit -hide_banner -v 40 "$filename"  #the -v 40 is a good verbosity I think
  else
    /usr/bin/ffplay -hide_banner -v 40 "$filename"
  fi
}
alias ffplayer=ffplay
# convert spaces in files to underscore
#while read myf; do [ -f "$myf" ] || break; mv "$myf" "${myf// /_}"; done <<< "$( ls *\ * )"
# or just convert it into anonymously named/numbered mp3 files.
#n=1; while read myf; do mv "$myf" "$n.mp3"; (( n++ )); done <<< "$(ls *.mp3)"
mp3-review(){
  [[ "$(find -maxdepth 1 -type f -name '* *' | wc -l)" -ne 0 ]] && return 3 #any spaces in files? just exit. f*** it.
  for i in $(echo *.mp3 | tr ' ' '\n' | shuf | tr '\n' ' '); do vol-is-good || return 44; ffplay $i; read -n 1 -p 'delete? (y/N) ' yn; [[ $yn = 'y' ]] && { echo; rm -v $i; echo; } ;  done
  return 0
}
alert-me(){
  [ -z "$1" ] && return 3
  wall "$*"
  is_desktop_running && {
    DISPLAY=:0.0 zenity --title="$*" --info --text="$*" --no-wrap
  }
}
wifi-on(){
  #disable auto-connect on auto-connect-enabled connection(s)
  for i in $(nmcli connection show --active | grep wifi | egrep -o '\b[a-f0-9]+-[a-f0-9]+-[^ ]+\b'); do nmcli connection down uuid $i; done

  nmcli radio wifi on
}
wifi-off(){
  #disable auto-connect on auto-connect-enabled connection(s)
  for i in $(nmcli connection show --active | grep wifi | egrep -o '\b[a-f0-9]+-[a-f0-9]+-[^ ]+\b'); do nmcli connection down uuid $i; done

  nmcli radio wifi off
}
#use `sudo iw dev` to list wireless interface names
wifi-scan(){
  #sudo iw dev wlp1s0 scan | egrep 'SSID: [^ ]+' | awk '-F: ' '{print $2}' | sort 
  nmcli device wifi
}
wifi-connect(){
  #[ -z "$1" ] && { echo 'wifi-connect $SSID [$password]'; return 6; }
  [ -z "$1" ] && { echo 'wifi-connect $SSID'; return 6; }
  #local pwopt=''
  #[ -n "$2" ] && pwopt="password $2"
  #nmcli device wifi connect "$1" $pwopt && \
  nmcli --wait 20 --ask device wifi connect "$*"  #I'm 30%sure this is right.
}
date-toilet(){
  date | toilet --font term --gay
}
check-wifi-hardware-logs(){
  local i=''
  for i in NetworkManager.service systemd-networkd.service; do sudo journalctl --unit=$i | tail -40; sleep 10; done
}
