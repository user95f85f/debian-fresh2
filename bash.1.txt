

  https://dl.fedoraproject.org/pub/alt/live-respins/


YET ANOTHER BULL**** ISO BURNING TO A LIVEOS DEBIAN-BASED S***

  https://grml.org/features/

BINARY FILE SERVER WEBSITES TO UPLOAD TO EASILY WITH CLI/SHELL/CURL/WGET

  https://transfer.sh #your file is there for 14 days. TODO: filename restrictions? filesize restrictions?
  #using this service is a 0.3%good idea

  #EG. with:
  #curl --progress-bar --upload-file
  #or --form 'file=@filename.tar.gz' --form 'file2=@filename2.tar.gz'
  #or --form 'file=@"filename3.tar.gz";filename="whatever.dat"'
  #or wget --post-file=filename.tar.gz

OPEN CONNECTIONS TWO WAYS OF DOING IT BOTH BENEFICIAL

  sudo netstat -anpl --inet   #IP addresses and your IP address (3%sure)
  sudo netstat -tapdu         #hostnames of the foreign places

EXTERNAL IP ADDRESS RESEARCH

  #(ie. modem/router/ISP-hardware IP)
  curl --silent http://smart-ip.net/myip
  #TODO: try google searching 'my ip' 13%chance you'll get it

DEBIAN SOURCE CODE COMPILATION FUN

  apt --simulate build-dep vim
  sudo apt build-dep vim
  mkdir -pv ~/Downloads/vim-src && cd ~/Downloads/vim-src && {
    apt source --build vim #have fun
  }
  #<OPTIONAL>
  #TODO: figure out a way to undo the build-dep package installation (by purging all of those packages or whatever)
  #</OPTIONAL>

VERIZON AIRSPEED JETPACK

  Verizon Airspeed Jetpack $60 (Prepaid version) (4G) (2.4Ghz/5Ghz) (requires no credit check)
    (aka. Prepaid - Airspeed 4G Mobile Hotspot)
    (ie. Airspeed mobile [wifi] hotspot)
    (battery powered and/or AC + AC battery charged)
    (battery lasts about 4 hours)
    (the Jetpack is about 2x the size of a wallet)
    (comes with battery, SIM-card-pre-installed, and USB-based AC charger)
  $30-$60 25GB of data from Verizon for 1 month
    When you stop paying the service transparently gets dropped.
    Can pay with 100%cash forever at the Verizon Store.
    Don't need to pay anything in advance (unlike AT&T for some of their data-only pre-paid plans)
      (except of course the Jetpack + the 1 month of pre-paid data-only "plan" [ie. "Prepaid Plan" [aka?? "Prepaid Internet"]])
  There is a $15 fee for "Set Up And Go Service"
  Verizon Store asks for this information as a new Verizon customer:
  $name, $phone, $email, $physical_address (ie. mailing or home 90%sure), $4Digit_PIN_number

  Extra information:
    - at least with 2.4GHz the Wi-Fi of the Verizon Airspeed Jetpack
      it can do: 802.11b 802.11g or 802.11n
      (or it just chooses something automatically)
    - it does IPv6 + IPv4
    - it has a default IPv4 DNS and IPv6 DNS
    - you can use the charger's head (ie. the power plug-in part) and take
      it off to have a USB 2.0 [?] connection to plug-in to a
      laptop/computer/PC to connect to the Internet without
      wifi/802.*/2.4GHz/5GHz/SSID/password
        (to enable this feature login to the Jetpack's website & go
        System->Power Saving->USB Mode
        to activate this setting (because the default is to use the plug-in
        as a Charger, not an Internet providing "service")
  
  Setup: insert battery. The thing 90%sure will just auto-turn-on...I guess?
         Otherwise hold power button on the side for 2 seconds
         wait a little while for activation. 

  http://192.168.1.1     OR
  http://my.mobilehotspot
  {
    default username = admin
    default password = (same as the wifi password)
    default SSID     = Verizon-RC400L-*
  }

  MODEL:  VZW-ASMHS01PP
  MODEL2:     ASMHS01PP
  MODEL3:     ASMHS01  
  SKU:          6482753
  IMEI:   ******************************************** (hehe)
  JETPACK HARDWARE-SOFTWARE VERSION:  airspeed_0.01.51
  JETPACK HARDWARE-SOFTWARE VERSION2: airspeed_0.01.52
                                      (after Software Update released on June 2nd, 2022 38%sure)
  
  goto 2.4GHz WiFi info screen:
    extract(password) #it's located next to the lock icon

  change_credentials(): #eg. username/password
    Settings -> Management page
             -> System Admin
    (then log out)

  My Verizon Login: (TODO: requires testing)
    https://www.verizonwireless.com/b2c/myverizonlp/
    (some cool stuff: Account -> My Devices (see account plan)
    https://vzw.com/prepaid

  turn_off_data_on_jetpack():
    Advanced Settings -> Network Settings

  power_off_jetpack():
    *hold 3 seconds power button*

  power_on_jetpack():
    *hold power button until display turns on*

  reset_jetpack_device_physically(): #resets SSID-name/wifi-username/wifi-password
                                     #TODO: what else does the reset reset??? the software updates too?
    *remove battery cover*
    with device still powered on:
      *paper-clip reset hole ~6 seconds*

  if(jetpack_responsive == FALSE):
    reboot() #*hold power button for 8 seconds*
    restore_factory_settings() #90%sure this is the reset_jetpack_device_physically()

  wifi-on():
    *hold power for 3 seconds* #I'm 90%sure this is 0%right.....


VERIZON USB/DONGLE WIRELESS INTERNET (OBSOLETE/DEPRACATED HARDWARE)

  Verizon 4G LTE USB Modem UML295

  Needs a SIM card that's activated.
  access via:
    http://192.168.32.2:4330
    http://mbb.vzw.com

  Let the Verizon Store setup a valid SIM card & put it in the USB modem.  
  
  

DEBIAN NOTES

  echo Debian has 51,000 amd64/pre-compiled packages

DEBIAN TTY/VIRTUAL-CONSOLE THINGS TO TRY IN LIVEOS/LIVEISO/LIVEUSB

  sudo $EDITOR /etc/systemd/logind.conf
  #set NAutoVTs=8
  sudo systemctl restart logind #or find out how to do a daemon-reload `man systemctl`

GNU/LINUX LOG FILES LOOKING AT BULLS***

  #look at the log file of when your computer first boots:
  #all of those kernel messages like:
  #your BIOS version (eg. BIOS 1.11.0 12/04/2019),
  #your PC's model number (eg. Dell Inc. Inspiron 5566/0NWJDC),
  #your boot image (eg. /boot/vmlinuz-5.10.0-13-amd64),
  #your boot image's options (like toram and pcie_aspm=off)
  #the company that created your EFI in BIOS (eg. American Megatrends)
  #your processor's speed: (eg. 2900 MHz)
  #your kernel build date (eg. January 10th, 2021)
  man journalctl | grep -- --boot

  #know when you last booted
  uptime --since; uptime --pretty; sudo journalctl --list-boots | cat -

  #watch for new journalctl messages:
  sudo journalctl -n30 --follow

  #make/free more free? space on you DISK/SWAP:
  sudo journalctl --disk-usage | tr ' ' '\n' | egrep '^[0-9]'
  #224.0M  (for example)
  sudo journalctl --vacuum-size=100M

GNU/LINUX USER/GROUP MANAGMENT BULLS***

  #change a user's username/login name
  man usermod | grep -i login

  #add/append valid users to a group
  man usermod | grep -i -- '-g|append'

  #lock a user account
  man usermod | grep -i lock

  #move home directory for a user
  man usermod | grep -i home

  #add a new group to the system
  man groupadd | grep groupadd

DIFFERENCE PWD and CWD
  
  CWD (ie. CURRENT WORKING DIRECTORY) can change (ie. is dynamic) in/within the process that is ran.
  PWD (ie. PRINT WORK DIRECTORY) is constant.

  "Changes" Working Directory: CWD
  "Permanent" Working Directory: PWD

MOUNT A PARTITION WITHIN A FILESYSTEM BUT YOU CAN'T REMEMBER IF IT'S EXT4 or FAT32/VFAT???

  mount -t auto /dev/sdb1 /media/whatever11111111111111111111111

CLEAR/RESET/EMPTY A FILE

  #this is like:    echo -n '' > ~/hello.txt
  :>~/hello.txt

GO THROUGH INSIDE OF ONE-LEVEL SUBDIR AND DO SOMETHING

  for d in */; do ( if cd -- "$d"; then git status >/dev/null 2>&1; if [ $? = 128 ]; then printf '%s\n' "$d isn't a valid git repo"; fi; fi ); done

SED DELETE LINES THAT DO NOT MATCH

  echo 123 | sed '/123/!d'
  echo 123 | grep -v '123'

SHOW ALL IMAGES WITHIN THE CURRENTLY DIRECTORY SUPER FAST
  
  #in XFCE close the windows successfully with Alt+F4
  for i in *.jpg; do tkjpeg $i & done

CONVERT A STRING TO MAYBE SUCCESSFUL FILENAME. AUTO-BACKSLASH BULLS*** CHARACTERS.

  #the -l chomp(<STDIN>) and auto-newline for the print
  echo -n 'NORMAL_   BACKSLASHED :-!@#$%^&*()~<>?:"{}[];,./+' | perl -l -ne 'print qq(\Q$_\E)'

STRIPPING JPEG (PNG?????) EXIF DATA INFORMATION

  man exiftool #search 'all'
  man jpegoptim

CURL _VS_ WGET EQUIVALENCY COMPARISON

  #curl: --max-time SECONDS IN DECIMAL BEFORE BAIL.
  #wget: --timeout

  #curl: --disable    IGNORE all of the curl.conf files everywhere...

  #curl: --silent     DISABLE progress bar BS, informational sh**, and error sh**
  #curl: --show-error SHOW ERROR message iff --silent is given AND there is a 404/403/whatever.  (TODO: STDERR?)
  #TODO: is the progress bar screwy sent to STDERR to a file????
  #curl: --fail       INSTEAD of 404/403 HTML output, give nothing
  #TODO: is -POST necessary if I have "--form" options? Shouldn't POST be defaulted?
  #wget: '--post-data=name1=value1&name2=value2&name3=value3&name4=value4'

  #wget: --server-response print HTTP header (TODO: to stderr or stdout??)
  #curl: --head            "" (stdout 90%sure)

  curl --max-time 2.3 --disable --silent --show-error --fail -POST --form name1=value1 --form name2=value2 --form name3=value3 --form name4=value4

  #wget: --quiet          TODO all STDERR gone???? yup.
  #wget: --timestamping   TODO set the mod file date/time to whatever it is on the server???????
  wget --quiet --timestamping --output-document=tmp_output_file.dat

CURL VS WGET SUPER EQUIVALENCY EXAMPLES

  #the wget is +30% (more) verbose
  wget --output-document=- http://localhost:8080/wget-curl-me.php | grep Hello
  curl --output - http://localhost:8080/wget-curl-me.php | grep Hello

  wget --quiet  --output-document=- http://localhost:8080/wget-curl-me.php | grep Hello
  curl --silent --output - http://localhost:8080/wget-curl-me.php | grep Hello

  wget --quiet  --output-document=- http://localhost:8080/DNE.php | grep Hello
  echo $? #1
  curl --silent --output - http://localhost:8080/DNE.php | grep Hello
  echo $? #1

GET ALL OF THE CAMERA STATS AND PHOTO/IMAGE EDITOR STATS OF A JPEG MAYBE A PNG

  curl -s http://a.domain.com/bigfile.jpg | exiftool -
  #TODO how do you delete a certain "Comment" or entry or whatever
  #in your JPEG file EXIF data? man exiftool | grep -i remove
  #doesn't even give an example! (3%sure)

CURL POST FORMS BASICALLY TO DO NOTHING JUST TO SEE IF THERE IS AN ERROR OR NOT IN THE RESPONSE I GUESS

  #--show-error forces to show error EVEN when --silent
  #--fail exits 22 with 0 error messages on SERVER errors (eg. 404 and 403)
  #--header is extra headers. I believe with Expect: you can put a URL
  #--location redirects if you get a 3XX error message from the target web page with a redirect URL in its Header or whatever the f***
  curl --silent --show-error --location --fail -POST --form get=group --form email=whatever --form tool_ver=whatever --header Expect:whatever
  curl --silent --show-error --location --fail -POST --form hwaddr=whatever --header Expect:whatever

THE BEST WAY TO DETECT IF A COMMAND EXISTS

  command_available() {
    if [ -x "$1" ]; then return 0; fi
    # command -v "$1" >/dev/null 2>&1 # not required by policy, see #747320
    # which "$1" >/dev/null 2>&1 # is in debianutils (essential) but not on non-debian systems
    local OLDIFS="$IFS"
    IFS=:
    for p in $PATH; do
      if [ -x "${p}/${1}" ]; then
        IFS="$OLDIFS"
        return 0
      fi
    done
    IFS="$OLDIFS"
    return 1
  }
  if ! command_available 'wget'; then
    echo 'ERROR: wget is required for a network-based update, but it is not installed' 1>&2
    exit 5
  fi

SUPER HERE-DOC FOR A COMMAND ARGUMENT

  { perl -e "$(</dev/stdin)" kate; } <<\EOF
  print("package: ${ARGV[0]}\n");
  print("Hello world\n");
  EOF

CHOPPING LEFT OF A STRING REFERENCE

  str='123123123123'
  echo "${str#*3}"  #start from the furthest RIGHT. and CHOP LEFT. SUPER GREEDY.
  echo "${str##*3}" #start from the furthest LEFT. and CHOP LEFT. MINIMAL.


-z and -n ALTERNATIVE

  [[ "" ]] || echo "this is false. all empty strings are false"


SOME ARRAY AND STRING PUSH/APPEND SH** AND A WEIRD LOOP-PRINT RESEARCH

  str='123'
  arr=(1 2 3)
  str+=4      #1234
  arr+=(4)    #(1 2 3 4)

  ar=(1 2 3 4 5 6 7 8 9)
  printf '<%s>\t' "${ar[@]}"
  #<1>   <2>   <3>   <4>   <5>   <6>   <7>   

FILE GLOB FILENAME PATTERN EXPANSION TO ARRAY AND LOOP THROUGH

  touch 1.txt
  touch 2.txt
  touch 3.txt
  touch 4.html
  var=(*.txt)
  echo $var
  echo ${var[@]}
  for i in "${var[@]}"; do echo "$i"; done

BASH LIMITATIONS

  #for CSV/JSON/proper-XML/proper-HTML/proper-XHTML/mySQL/postgresSQL/binary-data-processing/floating-point-numbers/array-sorting/list-sorting
  sudo apt install jq bc sql xslt tidy xmlstarlet perl python gcc sort
  #gcc is for 'C'

MAN2TXT RESEARCH

  #I guess any of these would work *shrugs*
  man bash | col -bx > bash.1.txt
  man bash > bash.1.txt #TODO: need to test
  zcat `man --where bash` | groff -t -e -mandoc -Tascii - | less -R #has special escapes in the text *shrugs*

POSSIBLY USEFUL GIT COMMANDS

  git clone https://github.com/whatever_person/whatever_repo
  git commit -m 'commit message' #3%sure this will work
  git push #7%sure this will work
  git pull #update local files in case the remote updated
  git log #view changes (3%chance will work)
  git config #???


PASSIVE FOR LOOP WITH ARRAY AS AN ARGUMENT

  files_in_pwd=(*)  #this is a file glob.
  printf -- '- %s\n' "${files_in_pwd[@]}"
  #output:
  #- deleteme.txt
  #- Desktop
  #- Documents
  #- Downloads
  #- jason.jpg
  #- jason.v01.jpg
  #- test.sh
  #- windowsxp-wallpaper

ULTIMATE TIME STAMPED FILENAME VARIABLE GENERATOR

  rsync_log_location="$HOME/rsync_$(date +%Y%m%d_%H%M%S).log"

RSYNC RESEARCH

  rsync -avxKSH root@oldsystem:/home/ /home/

ULTIMATE SINGLE-CHARACTER INPUT HANDLING

  read -n 1 -p '? (Y/n) ' myv
  echo

  case "$myv" in
    [Yy]|'') echo deleting everything.;;
    [Nn]*)   echo everything has been saved.;;
  esac


THIS IS SAFE EVEN IF THE DIRECTORIES IN PWD HAVE WHITESPACE

  n=0
  for myf in */; do
    (( n++ ))
    echo "$n) $myf" 
  done

THIS IS SAFE EVEN IF THE FILES/DIR IN PWD HAVE WHITESPACE

  n=0
  for myf in *; do
    (( n++ ))
    echo "$n) $myf" 
  done

COMMAND ARGUMENT AS MULTI-LINED HERE-DOC

  this_gets_expanded=1
  { python -c "$(</dev/stdin)"; } <<EOF
  print("Hello $this_gets_expanded");
  print("world");
  EOF

  this_is_a_word=2
  { python -c "$(</dev/stdin)"; } <<\EOF
  print("Hello $this_is_a_word");
  print("world");
  EOF

TESTING TO SEE IF YOU'RE IN A TERMINAL RESEARCH

  if test -t 1; then
    echo we are in a TTY/terminal
  fi
  if ! tty -s; then #external command
    echo we are receiving STDIN through this function-call
  fi

CREATING A TEMPORARY FILE

  tmpfilename=$( mktemp -t whateverXXX )  #e.g. /tmp/whatever0S8; empty file.
  #-t is for "TEMPLATE" filename. It is a deprecated feature xD

USING NETCAT

  #on Debian/Listener:
  nc -l -p 1234 > $(mktemp --tmpdir=.)  #ie. ./tmp.05guYTU4jR; empty file.
    #if --tmpdir is set with no directory exported $TMPDIR is used, else /tmp/
    #however, without a TEMPLATE set (as per default, and expressed here-in with this command),
    #--tmpdir is default IMPLIED. Therefore in this case if '.' was not specified as the
    #temporary-target-directory (via i.e. --tmpdir=.) then $TMPDIR (unlikely) then
    #/tmp/ would be used.
  #on Pop/   Sender:
  nc -w 3 10.42.0.52 1234 < /etc/apt/sources.list
  #Android was @ 10.42.0.177

USING NMAP
  
  for ip_end_number in { 1 .. 255 }; do
    #-O is for Operating System detection. This requires root.
    #-v is for verbose. try -vv to get more.
    sudo nmap -v -O 10.42.0.$ip_end_number
  done

STDIN FROM A FILE

  cat < /etc/apt/sources.list

SLURP A FILE INTO A VARIABLE

  file_get_contents_var=$(<my_file_name.txt)  #the quotes are 0%necessary for simple assignment.

THIS SCRIPTS CONTENTS

  this_scripts_file_contents_string=$(<$0)

STDIN READ-IN LINE BY LINE

  while read myline; do
    echo $myline
  done <<< "$(</etc/apt/sources.list)"

  # a little off-topic but f*** you too
  # -r: no backslash-escape-literals executed
  # -a: read the new contents into an array
  strinigarray=()
  read -ra strinigarray <<< "$whatever"

  read whatever <<< $(echo stfu bitch) #"stfu bitch" with no newline
  read whatever <<<'sup' #'sup' with no newlines

USING MAPFILE TO SLURP A FILE INTO A BASH ARRAY

  echo 123 > hello.txt; mapfile < <(cat hello.txt); echo "${MAPFILE[@]}"

PRINTF MATH HEXADECIMAL N-BASE ARITHMETIC

  hexnum=ee3;decnum=500;printf '0x%08x\n' $(( 16#$hexnum + $decnum )) #0x000010d7

IMAGE MAGICK CONVERT MOGRIFY COMMANDS
  
  #-flip -flop -grayscale -rotate 90

WATCH A DIRECTORY FOR CREATED FILES ALL IN ALL OF ITS SUB-DIRECTORIES

  inotifywait --recursive \
              --monitor \
              --quiet \
              --event create ~/.config | tee ~/config_monitor_log.log

DEBIAN PACKAGE TIP: REMOVING CERTAIN PACKAGES THAT ARE DEPENDENTS OF A META PACKAGE

  sudo dpkg --force-depends --remove xfburn xfce4-dict xfce4-goodies
  sudo apt-mark hold $packages_that_can_be_autoremoved-get_from_apt-finstall_output


PYTHON3 `paste` PYTHON3 EQUIVALENT

  #!/usr/bin/python4.pl


  #zip() is like `paste abc.txt 123.txt zyx.txt`
  print(list(zip('abcde','12345','zyxwv')));

  #output:
  #[('a', '1', 'z'), ('b', '2', 'y'), ('c', '3', 'x'), ('d', '4', 'w'), ('e', '5', 'v')]


PYTHON3 SLURP AND PROCESS A BINARY FILE'S CONTENTS

  #!/usr/bin/python4.pl

  import sys

  #open this script's filename and print out its binary representation as a string
  with open(sys.argv[0], 'rb') as my_file_handle:
  {
    my_file_handle.seek(0, 2) #IE. seek from offset 0 to SEEK_END
    all_data_bytearray = bytearray(my_file_handle.tell())
    my_file_handle.seek(0)
    my_file_handle.readinto(all_data_bytearray)
    print(all_data_bytearray.hex())
  }


GITHUB SH**

  git clone https://github.com/user95f85f/fresh-debian2
  git clone https://github.com/user95f85f/fresh-windows
  git clone https://github.com/user95f85f/fresh-debian
  git status
  git add bash.1.txt _bashrc.txt
  git rm python-cheat-cheet.txt 
  git commit
  git-token-xclip-cp 
  git push
  #rm *; git stash
  #git whatchanged
  #git pull
  #git restore LICENSE on-first-boot.txt preREADME.txt
  #git config --global user.name 'user95f85f_cli'
  #sudo git config --system user.name 'user95f85f_cli'
  #git config --global core.askPass '/path/to/executable/that/echos/the/password/hehe.sh' 
  #git config --global credential.username 'user95f85f'
  #git config --global user.email 'user9de1d@gmail.com' #--required on the github for contributions to show up on your main page to show your activity on github

  #your global git config settings:
  cat <<EOF >~/.gitconfig
[user]
  name = ${GITHUB_USERNAME}_cli
  email = ${GITHUB_REGISTERED_EMAIL_FOR_CONTRIBUTION_ON_GITHUB_TRACKING}
[core]
  askPass = ${CHMOD_X_STDOUT_YOUR_TOKEN}
[credential]
  username = ${GITHUB_USERNAME}
EOF


JAVASCRIPT USE STRICT LIKE PERL

  'use strict';
  n = 1;        //autodie
  var n2 = 2;   //better

IMGUR UPLOAD

  curl --silent --header 'Authorization: Client-ID 313baf0c7b4d3ff' \
                --header 'Expect: ' \
                --form 'image=@your_image_filename_local.jpg' \
                https://api.imgur.com/3/image.xml > ~/out.txt

  curl --silent --header 'Authorization: Client-ID c9a6efb3d7932fd' \
                --header 'Expect: ' \
                --form 'image=@your_image_filename_local.jpg' \
                https://api.imgur.com/3/image.xml > ~/out2.txt


POPULAR WINE NAME
  
  echo Gewurztraminer
    # very sweet (sometimes/rarely dry)


URBANDICTIONARY JSON (API) REQUEST TO GET DEFINITIONS

  wget -O - 'https://api.urbandictionary.com/v0/define?term=bird' | jq -C | less -R
  wget -O - 'https://api.urbandictionary.com/v0/define?term=success' | grep -i definition

WORD WRAP STDIN TO STDOUT

  #default width is 75 if not set explicitely
  #--uniform-spacing is 1 space between words
  #                     2 spaces after periods
  bash whatever | fmt --uniform-spacing --width=72 > out.txt

HERE-DOC AS STDIN INPUT TO A COMMAND

  perl -ne 'BEGIN{@map = qw/areaid systemid netid/;} chomp; if ($_ !~ /^ /) { $dict = {router => $_}; push(@list, $dict); $n = 3; } else { $n--; $dict->{$map[$n]} = $_; } END { use Data::Dumper qw/Dumper/; print Dumper @list;}' <<'DATA'
  Paris
   00.0001
   0000.3090.6756
   00.0001.0000.3090.6756.00
  Berlin
   00.0001
   0000.3090.c7df
   00.0001.0000.3090.c7df.00
  London
   00.0001
   0000.0c0a.2c51
   00.0001.0000.0c0a.2c51.00
  Rome
   00.0001
   0000.0c0a.2aa9
   00.0001.0000.0c0a.2aa9.00
  Brussels
   00.0002
   0000.0c76.5b7c
   00.0002.0000.0c76.5b7c.00
  Amsterdam
   00.0002
   0000.0c04.dcc0
   00.0002.0000.0c04.dcc0.00
  DATA

WGET FOR WHEN WE MIGHT BE HITTING A DEAD WEB SERVER

  wget --tries=1 --timeout=8 --output-document=201.dat 'https://nexus-censored.censored.net:8443/repository/apt-censored-releases'

HOLY SH**

  #!/usr/bin/env bash

  command -v aptitude &>/dev/null || exit 69

  declare -a DEPS MANUALS PKDEPS
  export LANG="C"  ### better performances and no UTF-8 expected


  #note: this list is newline segregated/separated/tokened
  #watch out: this list includes i386 and all AND amd64 architecture packages (assuming you have i386 enabled)
  #watch out: this list may have dulicate listings from mixed i386 AND amd64 packages (assuming you have i386 enabled)
  str_installed_package_list="$(dpkg --list | mawk 'FNR>5{if (/^.i. /){$0=$2; sub(/:.+$/,""); print " "$0" "}}')"

  #%p is package name

  #38000+ packages are virtual?!
  #the `| egrep -v ':'` filters out the :i386 and :any packages. (so all we have are :amd64 virtual packages)
  #note: this stringed-list is newline tokened/segregated/separated
  str_virtual_package_list="$(aptitude --display-format ' %p ' search '?virtual(^)' | grep -v ':')"


  ar_manually_installed_packages=()
  # -r: avoid backslashes from creating escaped characters from the input
  # -d '': slurp the whole input versus just accepting one line
  read -d '' -ra ar_manually_installed_packages < <(apt-mark showmanual)
  ar_recommends_output_mess=()
  #very much some ${binary:Package} have explicit   :i386   or   :amd64  appended to their ${binary:Package} name
  #however, ironically, the list in the ${Recommends} never says if the Recommended_package is :i386 or :amd64
  # -t: chomp()
  readarray -t ar_recommends_output_mess < <(dpkg-query --showformat='${binary:Package}: ${Recommends}\n' --show "${ar_manually_installed_packages[@]}" |\
                          sed 's/ ([^)]\+)//g') #this sed is to strip the required package version in parenthesis that sometimes appears in the Recommended list.

  for PKG in "${PKDEPS[@]}"; do

     [[ "${PKG#* }" ]] || continue
     echo -en "${PKG%% *}  "
     read -d '' -ra DEPS <<<"${PKG#* }"
     for DEP in "${DEPS[@]}"; do

        [[ "$DEP" == "|" ]] && { echo -en "\e[0;33m$DEP\e[0m"; SPACE=""; continue; }
        [[ "$INSTALLEDPKGS" =~ " ${DEP%,} " ]] && { echo -en "$SPACE\e[0;37m$DEP\e[0m"; SPACE=" "; continue; }
        [[ "$VIRTUALS" =~ " ${DEP%,} " ]] && { echo -en "$SPACE\e[38;5;21m$DEP\e[0m"; SPACE=" "; continue; }
        echo -en "$SPACE\e[1m$DEP\e[0m"; SPACE=" "

     done
     echo

  done

IMAGE MAGICK RESEARCH WITH OVERLAPPING TWO IMAGES TO CREATE PIXEL-PARSEABLE OUTPUT

  #!/bin/bash

  #misc screenshot difference through composite automator
  #purpose: seek the image that can be used pixel-by-pixel to seek:

  #- location of cursor (i.e., x=342;y=420)
  #- location of crop (i.e., x=200;y=231;width=140;height=230)

  #<CONFIGURE>
  branches=(
  screenshot_over_blank
  blank_over_screenshot
  )
  colors=255
  modes=(
  exclusion
  difference
  subtract
  minus
  divide
  bumpmap
  )
  #</CONFIGURE>

  for main_dir in ${branches[*]} ; do
    for mode in ${modes[*]} ; do 
      location=$main_dir/$mode
      mkdir -p $location
      n=0
      for i in Screenshot*.jpg ; do 
        let n++
        [ `echo "$n % 2" | bc` -eq 1 ] && {
          last_jpeg=$i
          continue
        }
        if [ $main_dir = screenshot_over_blank ] ; then
          command="composite -compose $mode $i $last_jpeg $location/$n.png"
          echo $command > $location/readme.txt
          eval $command
        elif [ $main_dir = blank_over_screenshot ] ; then
          command="composite -compose $mode $last_jpeg $i $location/$n.png"
          echo $command > $location/readme.txt
          eval $command
        fi
      done
    done
  done

STRIP NON-ASCII CHARACTERS FROM A TEXT FILE

  #strip non-ASCII characters from the filename stored in variable $1
  perl -pi~ -e 's/[^[:ascii:]]+//g' "$1"

  #detect non-ASCII characters from the filename stored in variable $1
  perl -ne 'if(/[^[:ascii:]]/){print "found some non ascii";exit 1;}' "$1" && exit 0

MP3 INTO A VIDEO WITH A STILL IMAGE (400x300)

  ffmpeg -loop 1 -i video-background.png -i Necro-killed-by-sorc.mp3 -shortest video.mp4

/bin/sh VS /bin/bash SHE-BANGS WITH EXECUTABLES IN (/usr)?/bin/*

  grep /bin/sh | wc -l    #215
  grep /bin/bash | wc -l  #33
  file /bin/sh            #dash

WAIT UNTIL A SPECIFIC DAY OF THE MONTH AND ALERT YOURSELF OF THE NEW IMPROVED YOU

  while :; do [[ "$(date +%d)" = '12' ]] && { wall 'hell yeah'; DISPLAY=:0.0 zenity --title="I'm free!" --info --text='We made it' --no-wrap ; break; }; sleep 1h; done

SHOW A PROGRESS BAR WHILE COMMANDS EXECUTE IN A GUI

  ( cmd1; cmd2; cmd3; cmd4; ) | zenity --progress --title="f***ing wait" --pulsate --autoclose --nocancel

INSTALL A DESKTOP ENVIRONMENT ON YOUR DEBIAN

  tasksel --list-tasks
  #i desktop                  Debian desktop environment
  #u gnome-desktop            GNOME
  #i xfce-desktop             Xfce
  #u gnome-flashback-desktop  GNOME Flashback
  #u kde-desktop              KDE Plasma
  #u cinnamon-desktop         Cinnamon
  #u mate-desktop             MATE
  #u lxde-desktop             LXDE
  #u lxqt-desktop             LXQt
  #u web-server               web server
  #u ssh-server               SSH server
  #i laptop                   laptop

PERL/TK SHOW-CASE SHOWS YOU WHAT YOU CAN DO WITH PERL/TK!!!!

  widget #show perl/tk show-case that shows you all the cool things perl/Tk can do.

CREATE YOUR F***ING LIVE-OS YOU DUMB BI***

  LANGUAGE=C LANG=C LC_ALL=C perl << EOF
  open LOOP, '</dev/loop0' or die $!;
  open DEST, '</tmp/live' or die $!;
  ioctl(LOOP, 0x4C06, fileno(DEST)) or die $!; #0x4C06 on loop.h is: LOOP_CHANGE_FD
  close LOOP;
  close DEST;
  EOF

FFMPEG SLOW AUDIO BY A PERCENTAGE/%

  ffmpeg -i track_11_pitch2.mp3 -filter:a 'atempo=0.86' track_11_pitch2_slowed.mp3

TMUX QUICK REFERENCE GUIDE

  tmux
  tmux attach #ie. restore-pane-(settings-)session
  CTRL+B, d   DDDetach() from session
  CTRL+B, "   OPEN(horizontal pane)
  CTRL+B, %   OPEN(vertical pane)
  CTRL+B, ARROW KEYS      SWITCH(active/current pane)
  CTRL+B, x   CLOSE(active/current pane)
  CTRL+D      (same thing as above)
  exit        (same thing as above)

  `top`, `tail -f /var/log/syslog`, `watch-home`, `watch-logs-global-journalctl`

RUST CARGO "CRATE" BULLSH**

  #assuming the source code you want to compile is in ~/source-code.c
  cat ~/source-code.c | xclip -selection clipboard
  epiphany https://rust2c.com   #CTRL+V code in here
                                #put code ~/source-code.rs
  cd ~ && {
    sed -i '/register_tool/d;/feature(main/d;/^#\[main\]$/d' source-code.rs && \
    cargo new temp1111 && \
    mv -iv ~/source-code.rs temp1111/src/main.rs && \
    cd temp1111 && echo -e "\nlibc = \"0.2\"" >> Cargo.toml && cargo fetch && cargo build && cargo run
  }

MASS RENAME FILES RESEARCH

  #TODO: use this way instead of `ls *` to get directory/file-glob-based file listings.
  a=(dir/*)
  for file in "${a[@]}"; do echo $file; done
  dir/0 0 0 0.txt
  dir/1 1 1 1.txt
  dir/2 2 2 2.txt
  dir/3 3 3 3.txt

  # convert spaces in files to underscore
  while read myf; do [ -f "$myf" ] || break; mv "$myf" "${myf// /_}"; done <<< "$( ls *\ * )"
  # or just convert it into anonymously named/numbered mp3 files.
  n=1; while read myf; do mv "$myf" "$n.mp3"; (( n++ )); done <<< "$(ls *.mp3)"

PWD ASSESSMENT RESEARCH

  du -S
  492   ./data/global/excel
  4     ./data/global
  4     ./data
  600   .

  du
  492   ./data/global/excel
  496   ./data/global
  500   ./data
  1100  .

  du -h --max-depth=1
  500K  ./data
  1.1M  .

CHROOT INTO A GNU/LINUX DISTRIBUTION THAT IS INSTALLED AT AN EXT4 PARTITION ON AN HDD/SSD/USB-HDD AND
  RUN A GOOD/SOLID RECOVERY BASH SHELL IN THERE

  #TODO make sure we're running this as root..
  MOUNT_POINT=/root/mounted_ext4_partition_to_recover_here
  chroot-recoveryshell-automount-inherit-current-system-state(){
    mkdir -v $MOUNT_POINT || return 4
    #TODO mount the actual ext4 here...
    for i in dev{,pts} proc sys; do
      mount --bind /$i $MOUNT_POINT/$i
    done
    chroot $MOUNT_POINT #TODO: OR:  chroot $MOUNT_POINT /bin/su -
    echo REMEMBER to call chroot-recoveryshell-dismantle
    echo "OR you'll be sooooooooooorry"
  }
  chroot-recoveryshell-dismantle(){
    for i in dev{,pts} proc sys; do
      umount $MOUNT_POINT/$i
    done
  }

WICKED FILE MANAGEMENT OBSERVATION WITHIN DIRECTORIES!! RESEARCH

  tree -CAhF --dirsfirst
  ├── [4.0K]  data/
  │   └── [4.0K]  global/
  │       └── [4.0K]  excel/
  │           ├── [ 74K]  armor.txt
  │           ├── [ 56K]  MagicPrefix.txt
  │           ├── [ 64K]  MagicSuffix.txt
  │           ├── [ 54K]  misc.txt
  │           ├── [ 20K]  Runes.txt
  │           ├── [ 86K]  TreasureClassEx.txt
  │           └── [115K]  weapons.txt
  ├── [100K]  All-Diablo2-patch-history.txt
  ├── [ 882]  CMod-README.txt
  ├── [267K]  d2s_save_example2_JSON_colored.txt
  ├── [147K]  d2s_save_example_JSON_colored.txt
  ├── [ 245]  diablo-2-rings-x5-mod-creator.pl
  └── [ 67K]  Necro-killed-by-sorc.mp3
  3 directories, 13 files

  tree -CAFd
  └── data
      └── global
          └── excel
  3 directories

PASTEBIN / FILE UPLOAD RESEARCH

  curl --data-binary @file.txt https://paste.rs/
  curl -F 'f:1=@file.ext' ix.io
  #'zippyshare' use this to download:
  #https://github.com/mansuf/zippyshare-downloader
  #TODO: how to upload? xD

CURL RESEARCH

  #outputs: 000
  curl --output /dev/null --silent --head --location 'http://people.oregonstate.edu/' -w '%{http_code}'

FUNNY

  #python3 C compiler: (lol)
  echo -e "#include <stdio.h>\nint main(void){puts(\"Ran from python3 BABY\");return 0;}" > C.c; python3 -c 'import os;os.system("gcc C.c && ./a.out")'

USING FILENAMES TO OPEN YOUR WEB BROWSER RESEARCH

  debian-forum-open(){
    [ -z "$1" ] && return 55
    [ -f "$1" ] || return 56
    local filename="$(basename "$1")"
    [[ $filename =~ ^[0-9]+\.txt$ ]] || return 57
    local topic_id="${filename%%.*}"
    echo google-chrome "http://forums.debian.net/viewtopic.php?t=$topic_id" 
    google-chrome "http://forums.debian.net/viewtopic.php?t=$topic_id" 
  }

URL FETCHING RESEARCH RESEARCH

  #take a list of a URLs in a text file line-by-line and put them into 001.txt .. 999.txt
  n=0
  while read myLine; do
    (( n++ ))
    wget_out_file=$(printf '%03d.txt' $n)
    echo "$wget_out_file $myLine" >> wget-MAP.txt
    echo "wget -O $wget_out_file '$myLine'" >> wget-TODO.sh
  done <<< "$(<novaks-LINKs.txt)"

SOUNDCARD IMPORTANT INFORMATION

  pactl list sinks | egrep 'Name:|Headphones|Speakers|driver_name'
    Name: alsa_output.pci-0000_00_1f.3.analog-stereo
      alsa.driver_name = "snd_hda_intel"
      analog-output-speaker: Speakers (type: Speaker, priority: 10000, availability unknown)
      analog-output-headphones: Headphones (type: Headphones, priority: 9900, availability group: Legacy 2, availability unknown)

  man pactl | fgrep sink | fgrep port
         set-sink-port SINK PORT
                Set the specified sink (identified by its symbolic name or numerical index) to the specified port (identified by its symbolic name).
                Set  the supported formats of the specified sink (identified by its numerical index) if supported by the sink. FORMATS is specified as a semi-colon (;)

  Sometimes when the soundcard stops playing sound..it's because you have Headphones (ie. the one of two available ports) plugged in,
    but for some reason pulse-audio switched the active port for your sink (ie. your soundcard output) to Speakers.

  So you need to toggle it:  pactl set-sink-port $SINK_NAME $PORT_NAME
  Or in this case:           pactl set-sink-port alsa_output.pci-0000_00_1f.3.analog-stereo analog-output-headphones
  (Or if that doesn't work): pactl set-sink-port alsa_output.pci-0000_00_1f.3.analog-stereo analog-output-speaker

ENCRYPTED FILESYSTEM WITHIN A FILE USED WITH A "LOOP DEVICE" TO MAINTAIN ITS INTEGRITY AS ENCRYPTED

  #setup
  head -c 100M /dev/zero > ~/Documents/shield.img
  sudo losetup /dev/loop4 ~/Documents/shield.img #TODO: 0.2%chance need to create a fresh/ready loop device: losetup --find
  sudo cryptsetup luksFormat /dev/loop4 ~/Documents/shield-passphrase-key-whatever.txt  #be 900%sure this shield-key.txt has no newline bulls***.
  sudo cryptsetup isLuks /dev/loop4 && echo yay
  #generates /dev/mapper/shield_map_name as a real cleared partition...
  sudo cryptsetup open --type luks /dev/loop4 shield_map_name --key-file ~/Documents/shield-key.txt  
  sudo mkfs.ext4 /dev/mapper/shield_map_name  #I'm 30%sure this will work..lol
  #OMFG this better work. We should get a /dev/mapper/shield_map_name1 ???????UGH MOTHER F***
  #or wait it already was a partition...just cleared. huh I'm 3%sure anyways
  ls /dev/mapper/
  mkdir ~/Documents/shield_mapper_mount
  sudo mount -t ext4 /dev/mapper/shield_map_name ~/Documents/shield_mapper_mount
  sudo chmod g+rwx ~/Documents/shield_mapper_mount
  sudo chown :user ~/Documents/shield_mapper_mount
  touch ~/Documents/shield_mapper_mount/hello-world.txt
  file ~/Documents/shield_mapper_mount/hello-world.txt
  echo 'OK looks good. setup is done. time to get the f*** out.'
  sudo umount ~/Documents/shield_mapper_mount
  sudo cryptsetup close shield_map_name
  sudo losetup --detach /dev/loop4

  #now and forever
  sudo losetup /dev/loop4 ~/Documents/shield.img
  sudo cryptsetup isLuks /dev/loop4 && echo yay
  sudo cryptsetup open --type luks /dev/loop4 shield_map_name --key-file ~/Documents/shield-key.txt  
  sudo mount -t ext4 /dev/mapper/shield_map_name ~/Documents/shield_mapper_mount
  echo Time to do work now. Then we gtfo.
  sudo umount ~/Documents/shield_mapper_mount
  sudo cryptsetup close shield_map_name
  sudo losetup --detach /dev/loop4

DD RESEARCH
  
  oflags=sync,direct preferred rather than conv=sync

GNU USERLAND RESEARCH

  realpath ~/Documents/Github-repos #resolves even the softlink
  readlink ~/Documents              #resolves this specific symlink/true-path

SECURE / LIGHTWEIGHT LINUX STUFF RESEARCH

  https://musl.libc.org/

WEB BROWSERS RESEARCH

  #SUPER re-inserts passwords into your inputs as-needed:
  google-chrome

  #alts to chrome
  chromium

  #a little bit of a step down:
  epiphany

  #Super basic GUI-based non-JavaScript web browsers:
  dillo
  netsurf

  #TTY/virtual-console/terminal non-JavaScript non-Image-viewing web browsers:
  lynx
  links2
  links

BEST RECURSIVE GREP

  sudo grep -EIrni --extended-regex --binary-files=without-match --recursive --line-number --ignore-case 'libinput|synaptic' /var/log

FFMPEG COMMAND S***

  #400x285 image
  #Necro-killed-by-sorc.mp3: Audio file with ID3 version 2.4.0, contains:MPEG ADTS, layer III, v2,  56 kbps, 22.05 kHz, Monaural
  ffmpeg -loop 1 -i video-background.png -i Necro-killed-by-sorc.mp3 -shortest video.mp4

  #first one is PERFECT
  time ffmpeg -i female_duck_bathing_boyfriend_comes.mp4 -c:v vp9 -b:v 2.2k -c:a libopus out3.webm #>5minutes
  time ffmpeg -i female_duck_bathing_boyfriend_comes.mp4 -c:v vp9 -b:v 2.2k -c:a opus -strict -2 out2.webm
  ffmpeg -i female_duck_bathing_boyfriend_comes.mp4 -s 640x360 -r 15  resized.mp4
  du -h *.mp4 *.webm
  #108M female_duck_bathing_boyfriend_comes.mp4
  #5.7M out3.webm
  #6.0M out2.webm
  #27M  female_duck_bathing_boyfriend_comes_resized.mp4
  #125M out.webm

  #experimental s***: (haven't tried)
  time ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -i female_duck_bathing_boyfriend_comes.mp4 -c:v vp9 -c:a opus -strict -2 out.webm

BASH SECRETS
  
  #these ASCII characters are OK in bash without quotes (ie. single or double):
  echo hello++++++++++++%%%%%%%%%%%%%%%%%%%%

  #this is NOT cool
  echo hello???????????????????

MEGA GCC C COMPILING BU****** && LIBC S***

  gcc -ggdb3 -Wall -Wextra -Wpedantic sh17_code.c
  #TODO: does it even f***ing matter what C specification I use? UGH bulls***.
  #      I'm 90% sure default is 93% good...right???RIGHT?!!!
  #could use -pedantic to enforce K&R standards????
  #-ansi:  c89 == c90 == ANSI/ISO C

  #good technique:
  #1) variable declarations @ beginning of function
  #2) initialize ALL variable declarations

  #to avoid buffer overflows and Segmentation Faults
  #look up:  address sanitation, asan, gcc asan, address sanitizer
  #(as software packages or gcc options [eg. -fsanitize=address])

  #fopen() && fseek()   the libc way
  #open() && lseek()    the POSIX/UNIX way
  #TODO: which one does Windows 10 use? (lol)

  #man 2 open read close chmod

  pinfo libc #brilliant. requires:   sudo apt install glibc-doc-reference 

INTERESTING BUT STUPID BASH BU******

  timed_connect () { : > /dev/tcp/1.1.1.1/53 & local pid=$! ; (sleep 1 ; kill $pid) & wait $pid ; }

MATH GENIUS STUFF

  Huh. The Integral(From 0->INFI) of  e^(-x) * ln(x) dx   =   ~0.5772156649015328

GNU/LINUX+DEBIAN MALWARE/SECURITY NOTES

  Always fix upstream URL project locations first so all distributions (that package the source code) benefit from the security changes.

  any binary file can be checked for possible malware-s***:
    chkrootkit, rkhunter
    #lesser so:
    binwalk (detect + extract binary magicalized data in an ISO for example)
    string (duh)
    exiftool (duh)

  any binary/jpeg/png/mp3/ogg can hide inforomation with "steganography"
    (sounds 96%rare tho lmao)
    foremost, stegcracker, stegosuite
    +research: 'histogram analysis' and 'steganalysis'
  You can report those findings to debian-security@lists.debian.org
    (like hidden data within those files that are sus)

  jpeg/png can be tested with 'fuzzing'

  Protecting yourself while testing for potential malware information collection:
  Use a 'MAC" + max tight sandbox (limit network access + make $HOME read-only) + minimal/light image-viewer (eg. feh, sxiv)
    + rebind 'image' to read-only + 3%sure use 'sway' + disable dbus +
    bwrap sandbox + kernel protection somehow + could try a VM +
    avoid sandbox escape

  I'm 3%sure ClamAV+extensions[?] would help. I'm 2%sure ClamAV would need a >0%sandbox.
    
BASH S***

  #egrep a variable.hehe
  #DANGER: I really don't know if :alpha: and :alnum: cover MORE than a-zA-Z and a-zA-Z0-9 respectively
  x=ABC_1; LC_ALL=C; [[ $x =~ [[:alpha:]_]+[[:alnum:]_] ]] && printf '%s\n' "$x"; unset LC_ALL

MOAR BASH S*** F***

  while IFS= read -r -d '' file; do something "$file"; done < <(find /foo -print0)

BASH GENIUS MAN PAGE LOOK-UP

  man bash | grep -F -A 2 -B 2 '&>'

DEBIAN RECEIVE / SEND MAIL FROM GMAIL VIA POP3 (RECEIVE) AND SMTP (SEND) RESEARCH

  sudo apt install mpop msmtp #and good f***in' luck

DATE-BASED CHARACTER SEQUENCES TO SHOW DATE/DATETIME INFORMATION LIKE MINUTES SECONDS DAY OF MONTH 12HOUR 24HOUR AMPM NAME OF MONTH YEAR IN LIKE THREE FORMATS

  man strftime | grep -F -A 111 'ordinary character sequences'
  man date | grep -F -A 111 'Interpreted sequences are:'
  #TODO: now do printf lol

WHAT A GOOD COPYRIGHT NOTICE EXAMPLE

  Copyright (c) user95f85f

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.

COLOR/COLOUR MASSIVE PARALLEL BASH SCRIPT EXECUTING BULL**** PLUS LOCAL MULTI-LINED VARIABLE DECLARATION

  ###F*** TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  #gotta replace 'echo -n' and 'echo -e' and 'echo -ne' and 'echo -en' with printf SH**
  #</TODO>
  red=$(tput setaf 1) #notice: no double quotes! Huh. Must be a simple variable declaration.
  reset=$(tput sgr0)
  printf '4' > jobs_proc_file.txt
  cat <<EOF454545 > .links
https://google.com
https://facebook.com
https://twitter.com
EOF454545

  do_parallel(){
    local total=100 DL='echo -n wget'
    cat .links | parallel -j "$2" --jobs "$2" "echo -ne \"\\r\"; echo -n \"Jobs: ${red}${2}${reset}; Link: ${red}${1}${reset}; {#}/$total \"; $DL {}; echo -n '          '"
  }

  do_parallel something-special-here jobs_proc_file.txt
  echo #a basic newline at the end of the program

SUPER SYSTEM SUSTAIN/BACKUP

  rsync -aAXHSv /* /path/to/shared/folder \
    --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found,/home/*/.gvfs}
sudo tcpdump -i any -U 'src port 53 or dst port 53' > out.dat
#!/bin/bash



tail -f out.dat | grep --line-buffered -E 'my\.jetpack\.domain.* (A\?|AAAA\?|CNAME) ' | cut --characters=24-
watch-logs-global-journalctl is a function
watch-logs-global-journalctl () 
{ 
    sudo journalctl -n30 --follow
}
watch-home is a function
watch-home () 
{ 
    inotifywait --recursive --monitor --quiet --event create ~/.config ~/.local
}

FASTER GZIP ALTERNATIVE  RESEARCH

  apt install lzop #a faster compression solution VS gzip for streams:
  echo whatever | lzop > what.lz
  cat what.lz | lzop -d #should get 'whatever' as output

MASTERFUL TECH/CODING/SOURCE-CODE STUFF RESEARCH

  goog SHA1 site:geekflare.com
  goog SHA1 collision site:github.com

SWAP ESCAPE/ESC KEY AND CAPS LOCK TO MAKE IT EASIER TO USE VIM WHILE IN X11

  # this doesn't work while in a tty/virtual-console (even while .. lightdm for example.. is running)
  DISPLAY=:0.0 setxkbmap -option caps:swapescape
  # this does iff you're in a Desktop Environment (eg. XFCE or KDE)
  setxkbmap -option caps:swapescape

IRC BOT RESEARCH

  google: limnoria
  It's in python3 I guess
