
BASH TERMINAL-TTY HOW DO I EASILY REPLACE OR APPEND TYPED-UP TEXT INTO MY TEXT FILE?????

  #I guess this: TODO: I need more actual examples.
  tee whatever.txt >/dev/null <<EOF
line 1
line 2
line 3
EOF
  tee -a whatever.txt >/dev/null <<EOF
line 4
line 5
line 6
EOF

BASH DECLARE BLAAAAAAAAAhhhhhhh

	declare -p varp #equivalent to: echo -E, printf %q, TODO: tryme
	declare -- varp="1 2 3
4 5 6"
	read -d '' varp << 'EOFREWQ'
1 2 3
4 5 6
EOFREWQ

APPLE USES zsh AS ITS TERMINAL SHELL

	surprise!!!! within the last 5 years.

C COMPILER (.c -> .s 90% sure) ASSEMBLER (.s -> .o) OPTIMIZATION RANDOM RESEARCH FOR generic-x86 ARCHITECTURE OR TARGET TUNING

    clang optimization IR?????
    is IR optimization for the clang --compiler-target=generic-x86
    clang --target-architecture --target-tune #might provide IR optimization
    s/generic-x86/haswell|sandybridge/ #for clang, TODO: 0% portable?

*sigh* BASHRC FUNCTION TO CONVERT A STRING INPUT-ARGUMENT INTO MATCHED HTTP URL ADDRESSES

  lucky(){ s="$*"; [ -z "$s" ] && return 3; printf '%s' "$s" | perl -ne 'BEGIN{undef $/;}if(m#(https?://[a-zA-Z0-9,%\#=/.:?_+&\-]+)#){print $1;}'; }

SIMPLIFIED bash.1.txt RECORDING SCREENSHOTS TO A VIDEO USING IMAGEMAGICK

  sleep 8
  n=1
  while [ $n -lt 10 ]; do
    import -window root $(printf '%03d' $n).png
    sleep 0.3
  done
  convert -delay 41 *.png -resize 43% animation.gif

C COMPILING

  c preprocessor -> compiler -> c preprocessor -> assembler -> linker
  .s -> assembler -> .o -> linker -> executable

  sometimes:      .c, .s, .o
  sometimes:      .S, .s, .o
  sometimes:      .c, .S
  TODO: wtf?

  compiler:   .c into .s
  assembler:  .s into .o
  linker:     .o into .exe

PYTHON3 ALLAH MICKBAR
  #whatever

  [tuple(map(int, x.split(':'))) for x in l]
  ["500:250","3600:42"]`       `[(500, 250), (3600, 42)]
  sum(3 if a > b else (1 if a == b else 0) for a, b in map(lambda x: map(int, x.split(':')), l))
  sum(2*((a-b)>0)+1 for a,b in map(lambda x:map(int,x.split(':')),l) if a>=b)
  sum(2*((a-b)>0)+1-(a<b) for a,b in map(lambda x:map(int,x.split(':')),l))`
  re.sub(r'\$(matchThis)', lambda m: m.group(1).upper(), 'something 1 2 3 $var1')

SOME GOOD HTML ENTITIES RESEARCH

  &cent;    <!-- US cent sign -->
  &deg;     <!-- temperature degrees sign -->
  &hellip;  <!-- a 2% more condensed '...' -->
  &ne;      <!-- not-equal, !=, sign -->
  &ge;      <!-- >= in one character -->
  &le;      <!-- <= in one character -->
  &brvbar;  <!-- | with a space in the middle -->
  &Theta;   <!-- O with a line through the middle -->
  &Pi;      <!-- a tall math.PI symbol -->
  &OElig;   <!-- a capital C condensed with a capital E -->
  &egrave;  <!-- yet another engraved lower-case e -->
  &sub;     <!-- the @set to the left is LESS-THAN/WITHIN @super_set to the right -->


RECORD YOUR BASH SESSION COMMAND-SESSION

  script #file ``typescript'' gets created in PWD until you CTRL+D or whatever

RFC2822 compliant date string for current date

  date -R
  #Tue, 12 Jul 2022 16:16:32 -0700

BASH STDIN ACCEPTING COMMANDS EXTRAS

  # FILE contents As-STDIN 2 BASH command STDIN
  <"$filename_input" $command
  
  #for example:
  </etc/hosts pager


USING/OPENING STREAMS/SPECIAL-FILE-DESCRIPTORS TO ATTACH/USE IN YOUR BASH PROCESS 

  echo testString >~/dlt
  #open special file descriptors for this bash process
  exec 9<~/dlt 4>~/from_dlt    
  #accept file descriptor 9 as STDIN and output file descriptor 4 as STDOUT
  cat <&9 >&4                  
  #close file-descriptor 4 as an OUTPUT and close file-descriptor 9 as an INPUT stream/file
  exec 4>&- 9<&-              
  head ~/from_dlt
  #testString
  shred --verbose -u ~/dlt ~/from_dlt

DELETE ALL CARRIAGE RETURN CHARACTERS IN BASH FROM STDOUT OF A PREVIOUS BASH COMMAND EXECUTION

  | tr --delete '\r'

BASH BULL****

  man col
  man cut
  man xargs
  man bash | grep -iF --color=always expansion | less -R
  man bash | grep -iF --color=always substitution | less -R
  man bash | grep -iE -A 2 --color=always '-e|-w|-x|-nt|-ot' | less -R
  man bash | grep -iE -A 2 --color=always '-eq|-ge|-gt|-lt|-le|-ne' | less -R

  #BASH metacharacters: ) < ; > & ( | 
  #BASH whitespace for the for loop: '\n', ' '  (98% correct)

BASH DETECT HARD LINKS

  [ "$file1" -ef "$file2" ] && echo hardlinked

BASH WHATEVER NAME SORT ALGORITHM COMPARISON FOR STRINGS

  [[ a < b ]] && echo yes a is before b

BASH TODO

  #what if I go like this:
  true && true && true || true || true && true && echo hello world

PID OF CURRENT BASH/SHELL PROCESS

  echo $$ #for example: 1229301

PID OF BACKGROUND JOB PROCESS

  sleep 8& echo $! #for example: 1229320 

GREAT MORE SH** COMMANDS

  apt -s install bsdmainutils
  apt -s install moreutils
  apt -s install whiptail #`newt` UI dialog boxes

TRANSLATION RESEARCH

  apt -s install gettext

FU**ING BASH BULL****

  printf -v 'variable_name' 'value_of_variable'

  #expansion variable-name bull****
  bye=bye
  hello=bye
  echo ${!hello}
#bye

  hello=012345
  echo ${hello:2}
#2345

  sub(){ echo "${@:2}"; } ; sub 'arg 1' 'arg 2' 'arg 3'
#arg 2 arg 3

  a='1 1' b='2 2' c='3 3'
  declare -p a b c | paste - - -
#declare -- a="1 1"	declare -- b="2 2"	declare -- c="3 3"
  declare -p a b c | column #same as the paste - - - above
#declare -- a="1 1"	declare -- b="2 2"	declare -- c="3 3"

KERNEL BOOT COMMAND (GRUB?) YEAAAAAAAH

  modprobe.blacklist=i5500_temp,coretemp,intel_idle,intel_cstate,intel_uncore,acpi_cpufreq,pcc_cpufreq,intel_powerclamp,i7core_edac,intel_rapl_msr,intel_rapl_common,intel_pmc_bxt

BASH `date` UNIQUE STYLE OUTPUT WITH NANO SECONDS AND SECONDS

  date '+%Y%m%d%H%M.%S.%3N' #the %3N is basically 3 random digits
#202207180947.34.826

BASH ECHO OTHER NON-ASCII CHARACTERS?????????????????????? 0

  echo "$f ðŸ¡† $fn"
#from.txt ðŸ¡† to.txt

BASH AN 0.2% GOOD FILE TEST

  [ -s ~/p.txt ] && echo 'file_exists($_) && !file_is_empty($_)'

YET ANOTHER PLACE TO UPLOAD YOUR PNG/JPG (90% sure JPG) IMAGE FILES

  https://postimg.cc/

  #For example:
  https://postimg.cc/8Q8AA8aq   #fake URL
  #Which has the raw image at:
  https://i.postimg.cc/9qmmBQiz/astring-20220718-120000.png #noon. fake URL
